# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  


variables:
  BACKEND_NAV: backend
  FRONT_NAV: front-end

default:
  image: node:16.10.0

before_script:
  - apt-get update -qq && apt-get install -y curl
  - curl -L https://fly.io/install.sh | sh
  - export FLYCTL_INSTALL="/root/.fly"
  - export PATH="$FLYCTL_INSTALL/bin:$PATH"
  

.package_install:
  script: &installing_dependencies
    - npm install
    

.navigation:
  script:
    - cd 

.job1: 
  stage: build  
  tags:
    - ci
  script:
    - echo $CI_JOB_IMAGE	
    - node --version

.install_job back-end 1/2:
  stage: build  
  tags: 
    - ci
  script:
    - cd $BACKEND_NAV
    - *installing_dependencies    
    - echo successfully updated
    - ls
  artifacts:
    paths:
      - backend/node_modules
    expire_in: 1 week

.install_job front-end 2/2:
  stage: build 
  tags:
    - ci    
  script:
    - cd $FRONT_NAV
    - *installing_dependencies
    - echo front-end install
  artifacts:
    paths:
      - front-end/node_modules      
    expire_in: 1 week
    when: always

.eslint back-end 1/2:
  stage: test
  tags:
    - ci
  dependencies:
    - install_job back-end 1/2
  script:
    - cd $BACKEND_NAV
    - npm run eslint
  needs: ['install_job back-end 1/2']
     

.eslint front-end 2/2:
  stage: test
  tags: 
    - ci
  dependencies:
    - install_job front-end 2/2
  script:
    - cd $FRONT_NAV
    - npm run eslint
  needs: ['install_job front-end 2/2']

.unittesting 1/2:
  stage: test
  tags:
    - ci
  script:
    - cd $FRONT_NAV 
    - npm run test
  dependencies:
    - install_job front-end 2/2


.unittesting 2/2:
  stage: test
  tags:
    - ci
  dependencies:
    - install_job back-end 1/2
  script:
    - cd $BACKEND_NAV 
    - npm run test
  allow_failure: true

  

.integratingtest:
  image: cypress/browsers:node16.5.0-chrome94-ff93
  stage: test  
  tags: 
    - ci 
  dependencies:
    - install_job back-end 1/2
    - install_job front-end 2/2
  script:
    - cd $FRONT_NAV
    - npm ci
    - npm start &
    - sleep 100
    - cd ../$BACKEND_NAV
    - npm start &
    - sleep 10
    - cd ../$FRONT_NAV
    - npx cypress run --record --key $CYPRESS_CI_RECORDING_STRING --parallel --browser chrome --group 'UI - Chrome'
  
deploy:
  stage: deploy  
  tags:
    - ci
  script: 
    - echo $FLY_USER_TOKEN
    - flyctl auth login --email "2751vikassingh@gmail.com" --password "2G4nPYnSC4gk7c3"
    - flyctl launch
    - flyctl deploy

  

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
